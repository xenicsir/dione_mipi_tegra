diff -Naur a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dione-ir.dtsi b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dione-ir.dtsi
--- a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dione-ir.dtsi	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dione-ir.dtsi	2023-09-28 20:59:56.524902042 +0200
@@ -0,0 +1,433 @@
+/*
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <dt-bindings/media/camera.h>
+#include <dt-bindings/platform/t210/t210.h>
+
+/ {
+	host1x {
+		vi_base: vi {
+			num-channels = <1>;
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				vi_port0: port@0 {
+					reg = <0>;
+					xenics_dione_ir_vi_in0: endpoint {
+						port-index = <0>;
+						bus-width = <2>;
+						remote-endpoint = <&xenics_dione_ir_csi_out0>;
+					};
+				};
+			};
+		};
+
+		csi_base: nvcsi {
+			num-channels = <1>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			csi_chan0: channel@0 {
+				reg = <0>;
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					csi_chan0_port0: port@0 {
+						reg = <0>;
+						xenics_dione_ir_csi_in0: endpoint@0 {
+							port-index = <0>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_out0>;
+						};
+					};
+					csi_chan0_port1: port@1 {
+						reg = <1>;
+						xenics_dione_ir_csi_out0: endpoint@1 {
+							remote-endpoint = <&xenics_dione_ir_vi_in0>;
+						};
+					};
+				};
+			};
+		};
+
+		i2c@546c0000 {
+			dione_ir_single_cam0: xenics_dione_ir_a@0e {
+				compatible = "xenics,dioneir";
+				/* I2C device address */
+				reg = <0x0e>;
+				fpga-address = <0x5a 0x5b 0x5c 0x5d>;
+
+				/* V4L2 device node location */
+				devnode = "video0";
+
+				/* Physical dimensions of sensor */
+				physical_w = "7.680";
+				physical_h = "5.760";
+
+				sensor_model = "dione_ir";
+
+				use_sensor_mode_id = "false";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* DIONE_IR_MODE_640x480_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "640";
+					active_h = "480";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "694";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode1 { /* DIONE_IR_MODE_1280x1024_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1280";
+					active_h = "1024";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1334";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+				mode2 { /* DIONE_IR_MODE_320x240_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "320";
+					active_h = "240";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1404";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode3 { /* DIONE_IR_MODE_1024x768_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1024";
+					active_h = "768";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1079";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					port@0 {
+						reg = <0>;
+						xenics_dione_ir_out0: endpoint {
+							port-index = <0>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_csi_in0>;
+							link-frequencies = /bits/ 64 <249000000 500000000>;
+						};
+					};
+				};
+			};
+		};
+	};
+
+	/* CN 3423-xx SN xxxx 55mm F/1 */
+	lens_dione_ir@DIONE {
+		min_focus_distance = "2000.0"; /* F.R 2m ~ ... */
+		hyper_focal = "0.0";
+		focal_length = "55.0"; /* E.F.L 55mm */
+		f_number = "1.0"; /* F.NO 1.0 */
+		aperture = "0.0";
+	};
+};
+
+/ {
+	tcp: tegra-camera-platform {
+		compatible = "nvidia, tegra-camera-platform";
+
+		/**
+		* Physical settings to calculate max ISO BW
+		*
+		* num_csi_lanes = <>;
+		* Total number of CSI lanes when all cameras are active
+		*
+		* max_lane_speed = <>;
+		* Max lane speed in Kbit/s
+		*
+		* min_bits_per_pixel = <>;
+		* Min bits per pixel
+		*
+		* vi_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the VI ISO case
+		*
+		* vi_bw_margin_pct = <>;
+		* Vi bandwidth margin in percentage
+		*
+		* max_pixel_rate = <>;
+		* Max pixel rate in Kpixel/s for the ISP ISO case
+		*
+		* isp_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the ISP ISO case
+		*
+		* isp_bw_margin_pct = <>;
+		* Isp bandwidth margin in percentage
+		*/
+		num_csi_lanes = <2>;
+		max_lane_speed = <1500000>;
+		min_bits_per_pixel = <10>;
+		vi_peak_byte_per_pixel = <2>;
+		vi_bw_margin_pct = <25>;
+		max_pixel_rate = <240000>;
+		isp_peak_byte_per_pixel = <5>;
+		isp_bw_margin_pct = <25>;
+
+		/**
+		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
+		 * The first part is the camera_board_id for the module; if the module is in a FFD
+		 * platform, then use the platform name for this part.
+		 * The second part contains the position of the module, ex. "rear" or "front".
+		 * The third part contains the last 6 characters of a part number which is found
+		 * in the module's specsheet from the vendor.
+		 */
+		modules {
+			cam_module0: module0 {
+				badge = "porg_front_DIONE";
+				position = "front";
+				orientation = "1";
+				cam_module0_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "dione_ir 6-000e";
+					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/xenics_dione_ir_a@0e";
+				};
+				cam_module0_drivernode1: drivernode1 {
+					pcl_id = "v4l2_lens";
+					proc-device-tree = "/proc/device-tree/lens_dione_ir@DIONE/";
+				};
+			};
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dual-dione-ir.dtsi b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dual-dione-ir.dtsi
--- a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dual-dione-ir.dtsi	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-xenics-dual-dione-ir.dtsi	2023-09-12 15:12:00.500059796 +0200
@@ -0,0 +1,768 @@
+/*
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <dt-bindings/media/camera.h>
+#include <dt-bindings/platform/t210/t210.h>
+
+/ {
+	host1x {
+		vi_base: vi {
+			num-channels = <2>;
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+				vi_port0: port@0 {
+					reg = <0>;
+					xenics_dione_ir_vi_in0: endpoint {
+						port-index = <0>;
+						bus-width = <2>;
+						remote-endpoint = <&xenics_dione_ir_csi_out0>;
+					};
+				};
+				vi_port1: port@1 {
+					reg = <1>;
+					xenics_dione_ir_vi_in1: endpoint {
+						port-index = <4>;
+						bus-width = <2>;
+						remote-endpoint = <&xenics_dione_ir_csi_out1>;
+					};
+				};
+			};
+		};
+
+		csi_base: nvcsi {
+			num-channels = <2>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			csi_chan0: channel@0 {
+				reg = <0>;
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					csi_chan0_port0: port@0 {
+						reg = <0>;
+						xenics_dione_ir_csi_in0: endpoint@0 {
+							port-index = <0>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_dual_out0>;
+						};
+					};
+					csi_chan0_port1: port@1 {
+						reg = <1>;
+						xenics_dione_ir_csi_out0: endpoint@1 {
+							remote-endpoint = <&xenics_dione_ir_vi_in0>;
+						};
+					};
+				};
+			};
+			csi_chan1: channel@1 {
+				reg = <1>;
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					csi_chan1_port0: port@2 {
+						reg = <0>;
+						xenics_dione_ir_csi_in1: endpoint@2 {
+							port-index = <4>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_out1>;
+						};
+					};
+					csi_chan1_port1: port@3 {
+						reg = <1>;
+						xenics_dione_ir_csi_out1: endpoint@3 {
+							remote-endpoint = <&xenics_dione_ir_vi_in1>;
+						};
+					};
+				};
+			};
+		};
+	};
+
+	cam_i2cmux {
+		i2c_0: i2c@0 {
+			dione_ir_cam0: xenics_dione_ir_a@0e {
+				compatible = "xenics,dioneir";
+				/* I2C device address */
+				reg = <0x0e>;
+				fpga-address = <0x5a 0x5b 0x5c 0x5d>;
+
+				/* V4L2 device node location */
+				devnode = "video0";
+
+				/* Physical dimensions of sensor */
+				physical_w = "7.680";
+				physical_h = "5.760";
+
+				sensor_model = "dione_ir";
+
+				use_sensor_mode_id = "false";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* DIONE_IR_MODE_640x480_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "640";
+					active_h = "480";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "694";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode1 { /* DIONE_IR_MODE_1280x1024_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1280";
+					active_h = "1024";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1334";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+				mode2 { /* DIONE_IR_MODE_320x240_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "320";
+					active_h = "240";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1404";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode3 { /* DIONE_IR_MODE_1024x768_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_a";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1024";
+					active_h = "768";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1079";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					port@0 {
+						reg = <0>;
+						xenics_dione_ir_dual_out0: endpoint {
+							port-index = <0>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_csi_in0>;
+							link-frequencies = /bits/ 64 <249000000 500000000>;
+						};
+					};
+				};
+			};
+		};
+		i2c_1: i2c@1 {
+			dione_ir_cam1: xenics_dione_ir_e@0e {
+				compatible = "xenics,dioneir";
+				/* I2C device address */
+				reg = <0x0e>;
+				fpga-address = <0x5a 0x5b 0x5c 0x5d>;
+
+				/* V4L2 device node location */
+				devnode = "video1";
+
+				/* Physical dimensions of sensor */
+				physical_w = "7.680";
+				physical_h = "5.760";
+
+				sensor_model = "dione_ir";
+
+				use_sensor_mode_id = "false";
+
+				/**
+				* ==== Modes ====
+				* A modeX node is required to support v4l2 driver
+				* implementation with NVIDIA camera software stack
+				*
+				* == Signal properties ==
+				*
+				* phy_mode = "";
+				* PHY mode used by the MIPI lanes for this device
+				*
+				* tegra_sinterface = "";
+				* CSI Serial interface connected to tegra
+				* Incase of virtual HW devices, use virtual
+				* For SW emulated devices, use host
+				*
+				* pix_clk_hz = "";
+				* Sensor pixel clock used for calculations like exposure and framerate
+				*
+				* readout_orientation = "0";
+				* Based on camera module orientation.
+				* Only change readout_orientation if you specifically
+				* Program a different readout order for this mode
+				*
+				* == Image format Properties ==
+				*
+				* active_w = "";
+				* Pixel active region width
+				*
+				* active_h = "";
+				* Pixel active region height
+				*
+				* pixel_t = "";
+				* The sensor readout pixel pattern
+				*
+				* line_length = "";
+				* Pixel line length (width) for sensor mode.
+				*
+				* == Source Control Settings ==
+				*
+				* Gain factor used to convert fixed point integer to float
+				* Gain range [min_gain/gain_factor, max_gain/gain_factor]
+				* Gain step [step_gain/gain_factor is the smallest step that can be configured]
+				* Default gain [Default gain to be initialized for the control.
+				*     use min_gain_val as default for optimal results]
+				* Framerate factor used to convert fixed point integer to float
+				* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
+				* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
+				* Default Framerate [Default framerate to be initialized for the control.
+				*     use max_framerate to get required performance]
+				* Exposure factor used to convert fixed point integer to float
+				* For convenience use 1 sec = 1000000us as conversion factor
+				* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
+				* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
+				* Default Exposure Time [Default exposure to be initialized for the control.
+				*     Set default exposure based on the default_framerate for optimal exposure settings]
+				*
+				* gain_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_gain_val = ""; (ceil to integer)
+				* max_gain_val = ""; (ceil to integer)
+				* step_gain_val = ""; (ceil to integer)
+				* default_gain = ""; (ceil to integer)
+				* Gain limits for mode
+				*
+				* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_exp_time = ""; (ceil to integer)
+				* max_exp_time = ""; (ceil to integer)
+				* step_exp_time = ""; (ceil to integer)
+				* default_exp_time = ""; (ceil to integer)
+				* Exposure Time limits for mode (sec)
+				*
+				* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
+				* min_framerate = ""; (ceil to integer)
+				* max_framerate = ""; (ceil to integer)
+				* step_framerate = ""; (ceil to integer)
+				* default_framerate = ""; (ceil to integer)
+				* Framerate limits for mode (fps)
+				*
+				* embedded_metadata_height = "";
+				* Sensor embedded metadata height in units of rows.
+				* If sensor does not support embedded metadata value should be 0.
+				*/
+				mode0 { /* DIONE_IR_MODE_640x480_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_e";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "640";
+					active_h = "480";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "694";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode1 { /* DIONE_IR_MODE_1280x1024_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_e";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1280";
+					active_h = "1024";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1334";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+				mode2 { /* DIONE_IR_MODE_320x240_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_e";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "320";
+					active_h = "240";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1404";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "20000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60020000"; /* 60.020 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				mode3 { /* DIONE_IR_MODE_1024x768_60FPS */
+					mclk_khz = "24000";
+					num_lanes = "2";
+					tegra_sinterface = "serial_e";
+					phy_mode = "DPHY";
+					discontinuous_clk = "no";
+					dpcm_enable = "false";
+					cil_settletime = "0";
+
+					active_w = "1024";
+					active_h = "768";
+					pixel_t = "rgb_rgb88824";
+					readout_orientation = "0";
+					line_length = "1079";
+					/* inherent_gain = "1"; */
+					/* mclk_multiplier = "9.33"; */
+					pix_clk_hz = "83000000";
+
+					/* unused */
+					gain_factor = "16";
+					exposure_factor = "1000000";
+					min_gain_val = "16"; /* 1.00x */
+					max_gain_val = "170"; /* 10.66x */
+					step_gain_val = "1";
+					default_gain = "16"; /* 1.00x */
+					min_hdr_ratio = "1";
+					max_hdr_ratio = "1";
+
+					/* framerate */
+					framerate_factor = "1000000";
+					min_framerate = "40000000"; /* 40 fps */
+					max_framerate = "62000000"; /* 62 fps */
+					step_framerate = "1";
+					default_framerate = "60756000"; /* 60.756 fps */
+
+					/* unused */
+					min_exp_time = "13"; /* us */
+					max_exp_time = "683709"; /* us */
+					step_exp_time = "1";
+					default_exp_time = "2495"; /* us */
+
+					embedded_metadata_height = "0";
+				};
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					port@0 {
+						reg = <0>;
+						xenics_dione_ir_out1: endpoint {
+							port-index = <4>;
+							bus-width = <2>;
+							remote-endpoint = <&xenics_dione_ir_csi_in1>;
+							link-frequencies = /bits/ 64 <249000000 500000000>;
+						};
+					};
+				};
+			};
+		};
+	};
+
+	/* CN 3423-xx SN xxxx 55mm F/1 */
+	lens_dione_ir@DIONE {
+		min_focus_distance = "2000.0"; /* F.R 2m ~ ... */
+		hyper_focal = "0.0";
+		focal_length = "55.0"; /* E.F.L 55mm */
+		f_number = "1.0"; /* F.NO 1.0 */
+		aperture = "0.0";
+	};
+};
+
+/ {
+	tcp: tegra-camera-platform {
+		compatible = "nvidia, tegra-camera-platform";
+
+		/**
+		* Physical settings to calculate max ISO BW
+		*
+		* num_csi_lanes = <>;
+		* Total number of CSI lanes when all cameras are active
+		*
+		* max_lane_speed = <>;
+		* Max lane speed in Kbit/s
+		*
+		* min_bits_per_pixel = <>;
+		* Min bits per pixel
+		*
+		* vi_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the VI ISO case
+		*
+		* vi_bw_margin_pct = <>;
+		* Vi bandwidth margin in percentage
+		*
+		* max_pixel_rate = <>;
+		* Max pixel rate in Kpixel/s for the ISP ISO case
+		*
+		* isp_peak_byte_per_pixel = <>;
+		* Max byte per pixel for the ISP ISO case
+		*
+		* isp_bw_margin_pct = <>;
+		* Isp bandwidth margin in percentage
+		*/
+		num_csi_lanes = <4>;
+		max_lane_speed = <1500000>;
+		min_bits_per_pixel = <10>;
+		vi_peak_byte_per_pixel = <2>;
+		vi_bw_margin_pct = <25>;
+		max_pixel_rate = <240000>;
+		isp_peak_byte_per_pixel = <5>;
+		isp_bw_margin_pct = <25>;
+
+		/**
+		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
+		 * The first part is the camera_board_id for the module; if the module is in a FFD
+		 * platform, then use the platform name for this part.
+		 * The second part contains the position of the module, ex. "rear" or "front".
+		 * The third part contains the last 6 characters of a part number which is found
+		 * in the module's specsheet from the vendor.
+		 */
+		modules {
+			cam_module0: module0 {
+				badge = "porg_front_DIONE";
+				position = "front";
+				orientation = "1";
+				cam_module0_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "dione_ir 7-000e";
+					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/xenics_dione_ir_a@0e";
+				};
+				cam_module0_drivernode1: drivernode1 {
+					pcl_id = "v4l2_lens";
+					proc-device-tree = "/proc/device-tree/lens_dione_ir@DIONE/";
+				};
+			};
+			cam_module1: module1 {
+				badge = "porg_rear_DIONE";
+				position = "rear";
+				orientation = "1";
+				cam_module1_drivernode0: drivernode0 {
+					pcl_id = "v4l2_sensor";
+					devname = "dione_ir 8-000e";
+					proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/xenics_dione_ir_e@0e";
+				};
+				cam_module1_drivernode1: drivernode1 {
+					pcl_id = "v4l2_lens";
+					proc-device-tree = "/proc/device-tree/lens_dione_ir@DIONE/";
+				};
+			};
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dione-ir.dtsi b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dione-ir.dtsi
--- a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dione-ir.dtsi	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dione-ir.dtsi	2023-09-28 16:00:49.502789582 +0200
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "tegra210-camera-xenics-dione-ir.dtsi"
+
+#define CAM1_PWDN		TEGRA_GPIO(S, 7)
+
+/ {
+    host1x {
+		i2c@546c0000 {
+			xenics_dione_ir_a@0e {
+				reset-gpios = <&gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
+			};
+		};
+	};
+
+    gpio@6000d000 {
+		camera-control-output-low {
+			gpio-hog;
+			output-low;
+			gpios = < CAM1_PWDN 0 >;
+			label = "cam1-pwdn";
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dual-dione-ir.dtsi b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dual-dione-ir.dtsi
--- a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dual-dione-ir.dtsi	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-porg-camera-xenics-dual-dione-ir.dtsi	2023-09-28 16:00:58.894986939 +0200
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "tegra210-camera-xenics-dual-dione-ir.dtsi"
+
+#define CAM1_PWDN		TEGRA_GPIO(S, 7)
+#define CAM2_PWDN		TEGRA_GPIO(T, 0)
+#define CAM_I2C_MUX		TEGRA_GPIO(I, 0) // NFC_EN GPIO
+
+/ {
+	cam_i2cmux {
+		compatible = "i2c-mux-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		mux-gpios = <&gpio CAM_I2C_MUX GPIO_ACTIVE_HIGH>;
+		i2c-parent = <&i2c7>;
+		i2c@0 {
+			reg = <0>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			xenics_dione_ir_a@0e {
+				reset-gpios = <&gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
+			};
+		};
+		i2c@1 {
+			reg = <1>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+			xenics_dione_ir_e@0e {
+				reset-gpios = <&gpio CAM2_PWDN GPIO_ACTIVE_HIGH>;
+			};
+		};
+	};
+
+	gpio@6000d000 {
+		camera-control-output-low {
+			gpio-hog;
+			output-low;
+			gpios = < CAM1_PWDN 0  CAM2_PWDN 0>;
+			label = "cam1-pwdn", "cam2-pwdn";
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-dual.dts b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-dual.dts
--- a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-dual.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-dual.dts	2023-09-28 20:25:59.921765543 +0200
@@ -0,0 +1,116 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Jetson Device-tree overlay for Camera DIONE-IR for t210 dual
+ * cam connector baseboards
+ *
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions. All rights reserved.
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	overlay-name = "Camera DIONE-IR Dual";
+	jetson-header-name = "Jetson Nano CSI Connector";
+	compatible = "nvidia,p3449-0000-b00+p3448-0000-b00", "nvidia,p3449-0000-b00+p3448-0002-b00";
+
+	/* DIONE-IR dual sensor module */
+	fragment@0 {
+		target = <&dione_ir_cam0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@1 {
+		target = <&cam_module0>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_front_DIONE";
+			position = "front";
+			orientation = "1";
+		};
+	};
+	fragment@2 {
+		target = <&cam_module0_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "dione_ir 7-000e";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/xenics_dione_ir_a@0e";
+		};
+	};
+	fragment@3 {
+		target = <&dione_ir_cam1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@4 {
+		target = <&cam_module1>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_rear_DIONE";
+			position = "rear";
+			orientation = "1";
+		};
+	};
+	fragment@5 {
+		target = <&cam_module1_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "dione_ir 8-000e";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/xenics_dione_ir_e@0e";
+		};
+	};
+
+	fragment@6 {
+		target = <&xenics_dione_ir_vi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_csi_out0>;
+		};
+	};
+	fragment@7 {
+		target = <&xenics_dione_ir_vi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_csi_out1>;
+		};
+	};
+	fragment@8 {
+		target = <&xenics_dione_ir_csi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_dual_out0>;
+		};
+	};
+	fragment@9 {
+		target = <&xenics_dione_ir_csi_out0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@10 {
+		target = <&xenics_dione_ir_csi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_out1>;
+		};
+	};
+	fragment@12 {
+		target = <&xenics_dione_ir_csi_out1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx219.dts b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx219.dts
--- a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx219.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx219.dts	2023-09-28 16:02:06.096390813 +0200
@@ -0,0 +1,122 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Jetson Device-tree overlay for Camera DIONE-IR at port A along with camera
+ * IMX219 at port B
+ *
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions. All rights reserved.
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	overlay-name = "Camera DIONE-IR-A and IMX219-B";
+	jetson-header-name = "Jetson Nano CSI Connector";
+	compatible = "nvidia,p3449-0000-b00+p3448-0000-b00", "nvidia,p3449-0000-b00+p3448-0002-b00";
+
+	/* DIONE-IR + IMX219 sensor module */
+	fragment@0 {
+		target = <&dione_ir_cam0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@1 {
+		target = <&cam_module0>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_front_DIONE";
+			position = "front";
+			orientation = "1";
+		};
+	};
+	fragment@2 {
+		target = <&cam_module0_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "dione_ir 7-000e";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/xenics_dione_ir_a@0e";
+		};
+	};
+	fragment@3 {
+		target = <&imx219_cam1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@4 {
+		target = <&cam_module1>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_rear_RBPCV2";
+			position = "rear";
+			orientation = "1";
+		};
+	};
+	fragment@5 {
+		target = <&cam_module1_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "imx219 8-0010";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/rbpcv2_imx219_e@10";
+		};
+	};
+
+	fragment@7 {
+		target = <&xenics_dione_ir_vi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_csi_out0>;
+		};
+	};
+	fragment@8 {
+		target = <&rbpcv2_imx219_vi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&rbpcv2_imx219_csi_out1>;
+		};
+	};
+	fragment@9 {
+		target = <&xenics_dione_ir_csi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_dual_out0>;
+		};
+	};
+	fragment@10 {
+		target = <&xenics_dione_ir_csi_out0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@11 {
+		target = <&rbpcv2_imx219_csi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&rbpcv2_imx219_out1>;
+		};
+	};
+	fragment@12 {
+		target = <&rbpcv2_imx219_csi_out1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@13 {
+		target = <&dione_ir_cam1>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx477.dts b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx477.dts
--- a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx477.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-all-p3449-0000-camera-dione-ir-imx477.dts	2023-09-28 16:01:55.344167110 +0200
@@ -0,0 +1,122 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Jetson Device-tree overlay for Camera DIONE-IR at port A along with camera
+ * IMX477 at port B
+ *
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions. All rights reserved.
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	overlay-name = "Camera DIONE-IR-A and IMX477-B";
+	jetson-header-name = "Jetson Nano CSI Connector";
+	compatible = "nvidia,p3449-0000-b00+p3448-0000-b00", "nvidia,p3449-0000-b00+p3448-0002-b00";
+
+	/* DIONE-IR + IMX477 sensor module */
+	fragment@0 {
+		target = <&dione_ir_cam0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@1 {
+		target = <&cam_module0>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_front_DIONE";
+			position = "front";
+			orientation = "1";
+		};
+	};
+	fragment@2 {
+		target = <&cam_module0_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "dione_ir 7-000e";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@0/xenics_dione_ir_a@0e";
+		};
+	};
+	fragment@3 {
+		target = <&imx477_cam1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@4 {
+		target = <&cam_module1>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_rear_RBPCV3";
+			position = "rear";
+			orientation = "1";
+		};
+	};
+	fragment@5 {
+		target = <&cam_module1_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "imx477 8-001a";
+			proc-device-tree = "/proc/device-tree/cam_i2cmux/i2c@1/rbpcv3_imx477_e@1a";
+		};
+	};
+
+	fragment@7 {
+		target = <&xenics_dione_ir_vi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_csi_out0>;
+		};
+	};
+	fragment@8 {
+		target = <&rbpcv3_imx477_vi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&rbpcv3_imx477_csi_out1>;
+		};
+	};
+	fragment@9 {
+		target = <&xenics_dione_ir_csi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_dual_out0>;
+		};
+	};
+	fragment@10 {
+		target = <&xenics_dione_ir_csi_out0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@11 {
+		target = <&rbpcv3_imx477_csi_in1>;
+		__overlay__ {
+			status = "okay";
+			port-index = <4>;
+			bus-width = <2>;
+			remote-endpoint = <&rbpcv3_imx477_out1>;
+		};
+	};
+	fragment@12 {
+		target = <&rbpcv3_imx477_csi_out1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@13 {
+		target = <&dione_ir_cam1>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+};
diff -Naur a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-common-dione-ir.dts b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-common-dione-ir.dts
--- a/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-common-dione-ir.dts	1970-01-01 01:00:00.000000000 +0100
+++ b/nvidia/platform/t210/porg/kernel-dts/tegra210-p3448-common-dione-ir.dts	2023-09-28 20:23:01.551461692 +0200
@@ -0,0 +1,120 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Jetson Device-tree overlay for Camera DIONE IR on
+ * t210 single cam connector baseboards
+ *
+ * Copyright (c) 2021-2023, Xenics Infrared Solutions. All rights reserved.
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	overlay-name = "Camera DIONE-IR";
+	jetson-header-name = "Jetson Nano CSI Connector";
+	compatible = "nvidia,p3542-0000+p3448-0003", "nvidia,p3449-0000-a02+p3448-0000-a02","nvidia,p3449-0000-a01+p3448-0000-a01";
+
+	/* DIONE-IR single sensor module */
+	fragment@0 {
+		target = <&dione_ir_single_cam0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@1 {
+		target = <&cam_module0>;
+		__overlay__ {
+			status = "okay";
+			badge = "porg_front_DIONE";
+			position = "front";
+			orientation = "1";
+		};
+	};
+	fragment@2 {
+		target = <&cam_module0_drivernode0>;
+		__overlay__ {
+			status = "okay";
+			pcl_id = "v4l2_sensor";
+			devname = "dione_ir 6-000e";
+			proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/xenics_dione_ir_a@0e";
+		};
+	};
+	/* Enable VI ports */
+	fragment@3 {
+		target = <&vi_base>;
+		__overlay__ {
+			num-channels=<1>;
+		};
+	};
+	fragment@4 {
+		target = <&vi_port0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@5 {
+		target = <&xenics_dione_ir_vi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_csi_out0>;
+		};
+	};
+	/* Enable CSI ports */
+	fragment@6 {
+		target = <&csi_base>;
+		__overlay__ {
+			num-channels=<1>;
+		};
+	};
+	fragment@7 {
+		target = <&csi_chan0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@8 {
+		target = <&csi_chan0_port0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@9 {
+		target = <&xenics_dione_ir_csi_in0>;
+		__overlay__ {
+			status = "okay";
+			port-index = <0>;
+			bus-width = <2>;
+			remote-endpoint = <&xenics_dione_ir_out0>;
+		};
+	};
+	fragment@10 {
+		target = <&csi_chan0_port1>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+	fragment@11 {
+		target = <&xenics_dione_ir_csi_out0>;
+		__overlay__ {
+			status = "okay";
+			remote-endpoint = <&xenics_dione_ir_vi_in0>;
+		};
+	};
+	/* tegra-camera-platform settings */
+	fragment@12 {
+		target = <&tcp>;
+		__overlay__ {
+			num_csi_lanes = <2>;
+			max_lane_speed = <1500000>;
+			min_bits_per_pixel = <10>;
+			vi_peak_byte_per_pixel = <2>;
+			vi_bw_margin_pct = <25>;
+			max_pixel_rate = <240000>;
+			isp_peak_byte_per_pixel = <5>;
+			isp_bw_margin_pct = <25>;
+		};
+	};
+};
