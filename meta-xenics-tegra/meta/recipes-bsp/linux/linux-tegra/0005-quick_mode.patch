From b9c9de2a514f3c70d7b98ddcf8f5365a099d5f13 Mon Sep 17 00:00:00 2001
From: Botond Kardos <bkardos70@gmail.com>
Date: Fri, 27 May 2022 16:51:27 +0200
Subject: [PATCH] fix quick_mode handling

---
 nvidia/drivers/media/i2c/dione_ir.c | 215 +++++++++++++++-------------
 1 file changed, 115 insertions(+), 100 deletions(-)

diff --git a/nvidia/drivers/media/i2c/dione_ir.c b/nvidia/drivers/media/i2c/dione_ir.c
index 215e4e444b65..f1764cf86a51 100644
--- a/nvidia/drivers/media/i2c/dione_ir.c
+++ b/nvidia/drivers/media/i2c/dione_ir.c
@@ -142,6 +142,7 @@ struct dione_struct {
 	struct camera_common_data	*s_data;
 	struct tegracam_device		*tc_dev;
 	ktime_t					start_up;
+	int						quick_mode;
 };
 
 
@@ -302,6 +303,7 @@ static int dioneir_power_on(struct camera_common_data *s_data)
 	struct camera_common_power_rail *pw = s_data->power;
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
+	struct dione_struct *priv = (struct dione_struct *)s_data->priv;
 
 	dev_dbg(dev, "%s: power on\n", __func__);
 	if (pdata && pdata->power_on) {
@@ -313,48 +315,50 @@ static int dioneir_power_on(struct camera_common_data *s_data)
 		return err;
 	}
 
-	if (pw->reset_gpio) {
-		if (gpio_cansleep(pw->reset_gpio))
-			gpio_set_value_cansleep(pw->reset_gpio, 1);
-		else
-			gpio_set_value(pw->reset_gpio, 1);
-	}
+	if (!priv->quick_mode) {
+		if (pw->reset_gpio) {
+			if (gpio_cansleep(pw->reset_gpio))
+				gpio_set_value_cansleep(pw->reset_gpio, 1);
+			else
+				gpio_set_value(pw->reset_gpio, 1);
+		}
 
-	if (unlikely(!(pw->avdd || pw->iovdd || pw->dvdd)))
-		goto skip_power_seqn;
+		if (unlikely(!(pw->avdd || pw->iovdd || pw->dvdd)))
+			goto skip_power_seqn;
 
-	usleep_range(10, 20);
+		usleep_range(10, 20);
 
-	if (pw->avdd) {
-		err = regulator_enable(pw->avdd);
-		if (err)
-			goto dioneir_avdd_fail;
-	}
+		if (pw->avdd) {
+			err = regulator_enable(pw->avdd);
+			if (err)
+				goto dioneir_avdd_fail;
+		}
 
-	if (pw->iovdd) {
-		err = regulator_enable(pw->iovdd);
-		if (err)
-			goto dioneir_iovdd_fail;
-	}
+		if (pw->iovdd) {
+			err = regulator_enable(pw->iovdd);
+			if (err)
+				goto dioneir_iovdd_fail;
+		}
 
-	if (pw->dvdd) {
-		err = regulator_enable(pw->dvdd);
-		if (err)
-			goto dioneir_dvdd_fail;
-	}
+		if (pw->dvdd) {
+			err = regulator_enable(pw->dvdd);
+			if (err)
+				goto dioneir_dvdd_fail;
+		}
 
-	usleep_range(10, 20);
+		usleep_range(10, 20);
 
 skip_power_seqn:
-	if (pw->reset_gpio) {
-		if (gpio_cansleep(pw->reset_gpio))
-			gpio_set_value_cansleep(pw->reset_gpio, 0);
-		else
-			gpio_set_value(pw->reset_gpio, 0);
-	}
+		if (pw->reset_gpio) {
+			if (gpio_cansleep(pw->reset_gpio))
+				gpio_set_value_cansleep(pw->reset_gpio, 0);
+			else
+				gpio_set_value(pw->reset_gpio, 0);
+		}
 
-	usleep_range(23000, 23100);
-	msleep(200);
+		usleep_range(23000, 23100);
+		msleep(200);
+	} /* if (!quick_mode) */
 
 	pw->state = SWITCH_ON;
 
@@ -372,17 +376,13 @@ static int dioneir_power_on(struct camera_common_data *s_data)
 	return -ENODEV;
 }
 
-static int dioneir_power_off_dummy(struct camera_common_data *s_data)
-{
-	return 0;
-}
-
 static int dioneir_power_off(struct camera_common_data *s_data)
 {
 	int err = 0;
 	struct camera_common_power_rail *pw = s_data->power;
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
+	struct dione_struct *priv = (struct dione_struct *)s_data->priv;
 
 	dev_dbg(dev, "%s: power off\n", __func__);
 
@@ -393,21 +393,23 @@ static int dioneir_power_off(struct camera_common_data *s_data)
 			return err;
 		}
 	} else {
-		if (pw->reset_gpio) {
-			if (gpio_cansleep(pw->reset_gpio))
-				gpio_set_value_cansleep(pw->reset_gpio, 1);
-			else
-				gpio_set_value(pw->reset_gpio, 1);
-		}
+		if (!priv->quick_mode) {
+			if (pw->reset_gpio) {
+				if (gpio_cansleep(pw->reset_gpio))
+					gpio_set_value_cansleep(pw->reset_gpio, 1);
+				else
+					gpio_set_value(pw->reset_gpio, 1);
+			}
 
-		usleep_range(10, 10);
+			usleep_range(10, 10);
 
-		if (pw->dvdd)
-			regulator_disable(pw->dvdd);
-		if (pw->iovdd)
-			regulator_disable(pw->iovdd);
-		if (pw->avdd)
-			regulator_disable(pw->avdd);
+			if (pw->dvdd)
+				regulator_disable(pw->dvdd);
+			if (pw->iovdd)
+				regulator_disable(pw->iovdd);
+			if (pw->avdd)
+				regulator_disable(pw->avdd);
+		}
 	}
 
 	pw->state = SWITCH_OFF;
@@ -421,6 +423,7 @@ static int dioneir_power_on_reva(struct camera_common_data *s_data)
 	struct camera_common_power_rail *pw = s_data->power;
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
+	struct dione_struct *priv = (struct dione_struct *)s_data->priv;
 
 	dev_dbg(dev, "%s: power on\n", __func__);
 	if (pdata && pdata->power_on) {
@@ -432,48 +435,50 @@ static int dioneir_power_on_reva(struct camera_common_data *s_data)
 		return err;
 	}
 
-	if (pw->reset_gpio) {
-		if (gpio_cansleep(pw->reset_gpio))
-			gpio_set_value_cansleep(pw->reset_gpio, 0);
-		else
-			gpio_set_value(pw->reset_gpio, 0);
-	}
+	if (!priv->quick_mode) {
+		if (pw->reset_gpio) {
+			if (gpio_cansleep(pw->reset_gpio))
+				gpio_set_value_cansleep(pw->reset_gpio, 0);
+			else
+				gpio_set_value(pw->reset_gpio, 0);
+		}
 
-	if (unlikely(!(pw->avdd || pw->iovdd || pw->dvdd)))
-		goto skip_power_seqn;
+		if (unlikely(!(pw->avdd || pw->iovdd || pw->dvdd)))
+			goto skip_power_seqn;
 
-	usleep_range(10, 20);
+		usleep_range(10, 20);
 
-	if (pw->avdd) {
-		err = regulator_enable(pw->avdd);
-		if (err)
-			goto dioneir_avdd_fail;
-	}
+		if (pw->avdd) {
+			err = regulator_enable(pw->avdd);
+			if (err)
+				goto dioneir_avdd_fail;
+		}
 
-	if (pw->iovdd) {
-		err = regulator_enable(pw->iovdd);
-		if (err)
-			goto dioneir_iovdd_fail;
-	}
+		if (pw->iovdd) {
+			err = regulator_enable(pw->iovdd);
+			if (err)
+				goto dioneir_iovdd_fail;
+		}
 
-	if (pw->dvdd) {
-		err = regulator_enable(pw->dvdd);
-		if (err)
-			goto dioneir_dvdd_fail;
-	}
+		if (pw->dvdd) {
+			err = regulator_enable(pw->dvdd);
+			if (err)
+				goto dioneir_dvdd_fail;
+		}
 
-	usleep_range(10, 20);
+		usleep_range(10, 20);
 
-skip_power_seqn:
-	if (pw->reset_gpio) {
-		if (gpio_cansleep(pw->reset_gpio))
-			gpio_set_value_cansleep(pw->reset_gpio, 1);
-		else
-			gpio_set_value(pw->reset_gpio, 1);
-	}
+	skip_power_seqn:
+		if (pw->reset_gpio) {
+			if (gpio_cansleep(pw->reset_gpio))
+				gpio_set_value_cansleep(pw->reset_gpio, 1);
+			else
+				gpio_set_value(pw->reset_gpio, 1);
+		}
 
-	usleep_range(23000, 23100);
-	msleep(200);
+		usleep_range(23000, 23100);
+		msleep(200);
+	} /* if (!quick_mode) */
 
 	pw->state = SWITCH_ON;
 
@@ -497,6 +502,7 @@ static int dioneir_power_off_reva(struct camera_common_data *s_data)
 	struct camera_common_power_rail *pw = s_data->power;
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
+	struct dione_struct *priv = (struct dione_struct *)s_data->priv;
 
 	dev_dbg(dev, "%s: power off\n", __func__);
 
@@ -507,21 +513,23 @@ static int dioneir_power_off_reva(struct camera_common_data *s_data)
 			return err;
 		}
 	} else {
-		if (pw->reset_gpio) {
-			if (gpio_cansleep(pw->reset_gpio))
-				gpio_set_value_cansleep(pw->reset_gpio, 0);
-			else
-				gpio_set_value(pw->reset_gpio, 0);
-		}
+		if (!priv->quick_mode) {
+			if (pw->reset_gpio) {
+				if (gpio_cansleep(pw->reset_gpio))
+					gpio_set_value_cansleep(pw->reset_gpio, 0);
+				else
+					gpio_set_value(pw->reset_gpio, 0);
+			}
 
-		usleep_range(10, 10);
+			usleep_range(10, 10);
 
-		if (pw->dvdd)
-			regulator_disable(pw->dvdd);
-		if (pw->iovdd)
-			regulator_disable(pw->iovdd);
-		if (pw->avdd)
-			regulator_disable(pw->avdd);
+			if (pw->dvdd)
+				regulator_disable(pw->dvdd);
+			if (pw->iovdd)
+				regulator_disable(pw->iovdd);
+			if (pw->avdd)
+				regulator_disable(pw->avdd);
+		}
 	}
 
 	pw->state = SWITCH_OFF;
@@ -538,6 +546,9 @@ static int dioneir_power_put(struct tegracam_device *tc_dev)
 	if (unlikely(!pw))
 		return -EFAULT;
 
+	/* really power off module when removing the driver */
+	priv->quick_mode = 0;
+
 	s_data->ops->power_off(s_data);
 
 	if (likely(pw->dvdd))
@@ -1328,6 +1339,7 @@ static int dioneir_board_setup(struct dione_struct *priv)
 	struct regmap *ctl_regmap = s_data->regmap;
 	u32 reg_val;
 	int err = 0;
+	int my_qm;
 
 	if (pdata->mclk_name) {
 		err = camera_common_mclk_enable(s_data);
@@ -1337,7 +1349,11 @@ static int dioneir_board_setup(struct dione_struct *priv)
 		}
 	}
 
+	my_qm = priv->quick_mode;
+	priv->quick_mode = 0;
 	err = s_data->ops->power_on(s_data);
+	priv->quick_mode = my_qm;
+
 	if (err) {
 		dev_err(dev, "error during power on sensor (%d)\n", err);
 		goto err_power_on;
@@ -1402,13 +1418,12 @@ static struct tegracam_device *dioneir_probe_one( struct dione_struct *priv,
 	if (!tc_dev)
 		return NULL;
 
+	priv->quick_mode = quick_mode;
 	tc_dev->client = priv->tc35_client;
 	tc_dev->dev = dev;
 	strncpy(tc_dev->name, "dione_ir", sizeof(tc_dev->name));
 	tc_dev->dev_regmap_config = &ctl_regmap_config;
 	tc_dev->sensor_ops = ops;
-	if (quick_mode)
-		ops->power_off = dioneir_power_off_dummy;
 	tc_dev->v4l2sd_internal_ops = &dioneir_subdev_internal_ops;
 	tc_dev->tcctrl_ops = &dioneir_ctrl_ops;
 
-- 
2.25.1

